int main() {
    int a;
    bool b;
    a(int) = 1;
    b(bool) = true;
    return a(int);
}

int OutIntA;
int OutIntB;
bool OutBoolA;
bool OutBoolB;
struct s1{
    int struct1Int;
    bool struct1Bool;
};

struct s2{
    struct s1 ss;
    int struct2Int;
    bool struct2Bool;
};

struct s3{
    struct s2 sss;
};

struct s1 sVar1;
struct s2 sVar2;
struct s3 sVar3;
void funA(int funAint, bool funAbool) {
    int insideAInt;
    bool insideABool;
    struct s3 insideAS3;
    if ((sVar3(s3).sss(s2).struct2Int(int) == funAint(int))) {
        return;
    }
    else {
        int insideElseInt;
        while (((funAbool(bool) && (!insideABool(bool))) || (sVar2(s2).ss(s1).struct1Int(int) >= insideElseInt(int)))) {
            insideAS3(s3).sss(s2).ss(s1).struct1Int(int)++;
            sVar3(s3).sss(s2).struct2Int(int)--;
            insideAInt(int) = ((main(->int)() * 345) / (funAint(int) + insideElseInt(int)));
        }
        return;
    }
    cin >> insideAInt(int);
    cin >> sVar2(s2).struct2Bool(bool);
    cout << main(->int)();
    cout << "output";
    cout << funAbool(bool);
    cout << funAint(int);
}

bool funB(int funBint) {
    int insideBInt;
    struct s2 insideBS2;
    if (((!OutBoolA(bool)) != OutBoolB(bool))) {
        return (funBint(int) <= insideBInt(int));
    }
    if ((insideBInt(int) > funBint(int))) {
        return (OutIntB(int) < OutIntA(int));
    }
    while ((insideBS2(s2).ss(s1).struct1Bool(bool) != false)) {
        sVar3(s3).sss(s2).ss(s1).struct1Int(int) = (((123 / 456) + 789) - insideBInt(int));
    }
    return funB(int->bool)(sVar3(s3).sss(s2).ss(s1).struct1Int(int));
    return true;
}

int funC(bool funCbool1, bool funCbool2) {
    OutBoolA(bool) = funB(int->bool)(OutIntA(int));
    OutBoolB(bool) = (OutBoolA(bool) || (funCbool1(bool) && funCbool2(bool)));
    funCbool2(bool) = funB(int->bool)(((5 / OutIntA(int)) - OutIntB(int)));
    return (OutIntA(int) + 8888888);
}

bool funD() {
    int funDInt1;
    int funDInt2;
    funDInt1(int) = ((3 * OutIntA(int)) / funC(bool,bool->int)((OutBoolA(bool) && OutBoolB(bool)), OutBoolB(bool)));
    funDInt2(int) = (-OutIntB(int));
    if ((funDInt1(int) > (-funDInt2(int)))) {
        return (!false);
    }
    else {
        return (sVar3(s3).sss(s2).ss(s1).struct1Bool(bool) == sVar2(s2).struct2Bool(bool));
    }
}

